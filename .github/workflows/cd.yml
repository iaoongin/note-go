name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  # Setting an environment variable with the value of a configuration variable
  CERT_MANAGER: ${{ vars.CERT_MANAGER }}
  DOMAIN: ${{ vars.DOMAIN }}
  EMAIL: ${{ vars.EMAIL }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build
        run: CGO_ENABLED=0 GOOS=linux go build -v -o build/note-go

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: note-go-${{ runner.os }}
          path: build/note-go

  push_to_registries:
    name: Push Docker image to registries
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - uses: actions/download-artifact@master
        with:
          name: note-go-${{ runner.os }}
          path: build/note-go
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          no-cache: true  # 禁用缓存，确保从头构建
          context: .  # 设置上下文为当前目录
          file: ./Dockerfile  # 指定 Dockerfile 的相对路径
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  delpy_to_k8s:
    runs-on: ubuntu-latest
    needs: push_to_registries
    environment: default  # 指定环境
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref_name }}

    - name: Render Kubernetes YAML
      run: |
        # 安装 envsubst
        sudo apt-get install gettext-base
        # 渲染 YAML 文件
        envsubst < note-go.yaml > rendered-note-go.yaml

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'  # 或者指定特定版本

    - name: Configure Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        # 添加全局配置以忽略 SSL 验证
        kubectl config set-cluster $(kubectl config current-context) --insecure-skip-tls-verify=true

    - name: Apply Kubernetes manifest
      run: |
        kubectl delete -f rendered-note-go.yaml || true
        kubectl apply -f rendered-note-go.yaml
